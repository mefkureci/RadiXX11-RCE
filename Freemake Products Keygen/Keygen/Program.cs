using System;

namespace Keygen
{    
    class Program
    {
        public static readonly ProductLicense[] ProductList =
        {
            new ProductLicense(
                "Business Pack",            
                new byte[] {0xA5, 0x72, 0xEF, 0x2D, 0x4B, 0x97, 0x91, 0xD9, 0x38, 0xEC, 0xC0, 0x9D, 0x5F, 0xA8, 0xC2, 0x48, 0x81, 0x93, 0x29, 0xAD, 0xCE, 0x16, 0xB2, 0x77, 0x4E, 0xDB, 0x1C, 0x7E, 0xD8, 0x86, 0x32, 0x24},
                new byte[] {0x54, 0x42, 0x6A, 0x73, 0x7E, 0x1C, 0xF4, 0x1E, 0x1D, 0xA2, 0xF1, 0xBA, 0x2B, 0x8A, 0xB5, 0x53}
            ),
            new ProductLicense(
                "Gold Pack",
                new byte[] {0xC3, 0x96, 0xFC, 0x19, 0x41, 0xA1, 0x48, 0x71, 0x26, 0xBB, 0x78, 0x48, 0x02, 0x18, 0xBA, 0x74, 0x4D, 0xEC, 0x22, 0x83, 0x92, 0x7F, 0xC2, 0xB4, 0xE6, 0xE6, 0x98, 0x84, 0xD5, 0xE1, 0x93, 0x95},
                new byte[] {0x42, 0x46, 0xC7, 0xBD, 0x0D, 0x38, 0x9C, 0xF7, 0xF3, 0x61, 0x87, 0x28, 0x88, 0x55, 0x43, 0xAE}
            ),
            new ProductLicense(
                "Infinite Pack",
                new byte[] {0x86, 0x77, 0x1F, 0x08, 0x17, 0x43, 0x29, 0x5D, 0x9B, 0xA6, 0xDD, 0x92, 0x8A, 0x56, 0x9E, 0x5A, 0xA3, 0xF1, 0xCE, 0x06, 0x2D, 0x68, 0x4D, 0xFA, 0xAE, 0xED, 0xF5, 0xA2, 0x51, 0x4A, 0xEF, 0xAE},
                new byte[] {0x36, 0x87, 0x14, 0xB4, 0x36, 0xCA, 0xE6, 0x8D, 0xA3, 0xE3, 0xA0, 0x4A, 0x43, 0x1F, 0x6E, 0x58}               
            ),
            new ProductLicense(
                "Media Access Pack",            
                new byte[] {0x4A, 0xE3, 0xA5, 0x87, 0x3B, 0xF9, 0x9E, 0x9B, 0x9B, 0x61, 0xD0, 0x81, 0x17, 0xC1, 0xB8, 0x72, 0x59, 0xCE, 0xED, 0xD0, 0x7E, 0xC4, 0x2E, 0xF9, 0x21, 0x41, 0x1E, 0x52, 0x2A, 0xDC, 0x4C, 0xC9},
                new byte[] {0xD5, 0x26, 0x55, 0x9C, 0x5D, 0x52, 0xB6, 0x78, 0x93, 0xAE, 0x2F, 0xE5, 0x58, 0xEE, 0xF7, 0x54}
            ),            
            new ProductLicense(
                "Mega Pack",
                new byte[] {0xB8, 0xC3, 0x23, 0xDC, 0xDE, 0xD0, 0x58, 0xB3, 0x90, 0x03, 0x31, 0x5F, 0x9C, 0x37, 0x64, 0xDA, 0xA4, 0x80, 0x26, 0x43, 0x9B, 0xEE, 0x6B, 0xBD, 0x21, 0x73, 0xF6, 0x31, 0x51, 0xC2, 0xA9, 0x6C},
                new byte[] {0xA7, 0x01, 0xA0, 0x22, 0x23, 0x06, 0xC5, 0x53, 0x87, 0x2A, 0x6B, 0x2B, 0xA2, 0x56, 0x17, 0xAD}                
            ),
            new ProductLicense(
                "Partricular Gold Pack",
                new byte[] {0xDE, 0x57, 0x82, 0xF1, 0x3F, 0xD5, 0x67, 0x3F, 0x26, 0x81, 0xED, 0xCE, 0x06, 0x5D, 0x2D, 0xED, 0x0F, 0xAC, 0x9C, 0x83, 0x49, 0x89, 0x28, 0x8E, 0xD7, 0xCB, 0x56, 0x5E, 0xC1, 0xA5, 0xFF, 0x0D},
                new byte[] {0x2D, 0xA1, 0x9C, 0xA4, 0x7A, 0x9A, 0xB9, 0x33, 0xFA, 0x59, 0x90, 0x09, 0x7D, 0x75, 0x78, 0x09}                
            ),
            new ProductLicense(
                "Premium Pack",            
                new byte[] {0x98, 0x6B, 0x66, 0x65, 0x65, 0x36, 0x2F, 0x0D, 0xAD, 0xFC, 0x87, 0x19, 0xE9, 0x79, 0x48, 0xE9, 0x92, 0xAA, 0x28, 0xA3, 0x3F, 0x56, 0x21, 0xC2, 0xB1, 0x22, 0x5D, 0xD7, 0xF4, 0x30, 0xC0, 0x8F},
                new byte[] {0x8C, 0xAC, 0x92, 0x29, 0xBC, 0x66, 0x35, 0x8A, 0x9D, 0x7B, 0xBF, 0x6C, 0xFF, 0xA6, 0xDA, 0xDA}
            ),
            new ProductLicense(
                "Remove Branding",
                new byte[] {0x04, 0xC8, 0xAB, 0x91, 0x0A, 0x5D, 0x24, 0x37, 0x82, 0x76, 0xEC, 0x69, 0x79, 0x5A, 0x62, 0xEC, 0x80, 0xBC, 0x8E, 0x31, 0xEA, 0x6D, 0x3E, 0x5E, 0x44, 0xC1, 0x79, 0xDC, 0x5E, 0x76, 0xB1, 0x7A},
                new byte[] {0x54, 0xE1, 0x9E, 0xD6, 0x39, 0x77, 0xBB, 0xDE, 0xEE, 0x95, 0x14, 0xFB, 0xDE, 0x5A, 0xF3, 0x93}               
            ),            
            new ProductLicense(
                "Subtitles Pack",
                new byte[] {0x7A, 0x6E, 0x93, 0x6E, 0xA9, 0x6E, 0x42, 0x5A, 0x6F, 0xD1, 0x4F, 0x3A, 0x7E, 0xB3, 0x10, 0xB2, 0x97, 0xE1, 0xF9, 0x57, 0x21, 0xC9, 0xCD, 0x77, 0xFF, 0xD9, 0x68, 0xBE, 0xF5, 0x77, 0x7D, 0xD3},
                new byte[] {0x2B, 0xD5, 0xD1, 0x7B, 0x8E, 0x1F, 0x52, 0x1A, 0xE3, 0x6A, 0x16, 0xFD, 0xD1, 0xBA, 0xEC, 0xB6}
            ),
            new ProductLicense(
                "Super Sale Pack",
                new byte[] {0xBA, 0x1B, 0xAD, 0x9D, 0x46, 0xC6, 0xCC, 0xC5, 0x62, 0x29, 0xCE, 0x37, 0x58, 0x1B, 0xA9, 0x48, 0xE3, 0x62, 0xD5, 0x25, 0x21, 0x6B, 0x4B, 0xD7, 0x21, 0x09, 0xF0, 0xA7, 0xC7, 0x8F, 0x36, 0x5E},
                new byte[] {0xB2, 0x2B, 0x8D, 0x7E, 0x87, 0x66, 0x54, 0x90, 0x3D, 0xBD, 0x46, 0xFD, 0xA7, 0xB2, 0xFF, 0x9F}                 
            ),                                                                                    
            new ProductLicense(
                "Super Speed Pack",
                new byte[] {0xA1, 0x9B, 0x8E, 0xA9, 0x6D, 0x46, 0x55, 0x66, 0x04, 0xEF, 0xEF, 0x4F, 0xA8, 0x46, 0x18, 0x40, 0x96, 0x68, 0xD8, 0xBC, 0xB2, 0x4F, 0x4D, 0xEB, 0x88, 0xC7, 0x36, 0x12, 0x26, 0xFE, 0x32, 0x4C},
                new byte[] {0x61, 0x6D, 0xB3, 0x4C, 0x01, 0xDF, 0x62, 0x83, 0x79, 0x20, 0xD8, 0xAC, 0x47, 0x3B, 0x44, 0xB5}                
            ),                            
            new ProductLicense(
                "Web Pack",
                new byte[] {0xF1, 0xCC, 0xFE, 0xEB, 0x2C, 0xB2, 0x9A, 0x7D, 0xF5, 0xA8, 0xE8, 0x0F, 0xC5, 0x82, 0xB3, 0xA0, 0x02, 0xA7, 0x10, 0xBE, 0x4B, 0xF3, 0xEE, 0x68, 0x07, 0x67, 0x36, 0xC2, 0x32, 0x95, 0x9F, 0x80},
                new byte[] {0x61, 0xDF, 0xC2, 0x5F, 0x3D, 0x20, 0xE9, 0x36, 0xEB, 0x1A, 0xA1, 0xE2, 0x13, 0xCE, 0x41, 0x86}               
            )                                                        
        };
        
        public static void Main(string[] args)
        {
            string option = null;
            
            do
            {
                Console.WriteLine("Freemake Products Keygen [by RadiXX11]");
                Console.WriteLine("======================================\n");            
                Console.WriteLine("Select a product pack:\n");            
                
                int productIndex = 0;
                foreach (var product in ProductList)
                    Console.WriteLine("{0:D2}. {1}", productIndex++, product.ProductName);
                
                Console.Write("\nOption [X = Exit]: ");                
                
                option = Console.ReadLine().ToUpper();
                
                Console.WriteLine();                
                
                if (int.TryParse(option, out productIndex) && (productIndex >= 0) && (productIndex < ProductList.Length))
                {
                    string s = null;
                    short rounds = 1;
                    
                    do{
                        Console.Write("Number of rounds before return final key [max is {0}]: ", short.MaxValue);                    
                        s = Console.ReadLine();
                    } while (!short.TryParse(s, out rounds) || (rounds <= 0));
                                        
                    Console.WriteLine("\n---------------------------------------------");
                    Console.WriteLine("Product: {0}", ProductList[productIndex].ProductName);
                    Console.WriteLine("Key....: {0}", ProductList[productIndex].GenerateKey(rounds));
                    Console.WriteLine("---------------------------------------------\n");                    
                }
                
            } while (option != "X");
        }
    }
}